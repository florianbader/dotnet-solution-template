parameters:
  - name: buildProject
    type: string
    default: ''

  - name: shouldTest
    type: boolean
    default: true

  - name: shouldLint
    type: boolean
    default: true

  - name: shouldPublish
    type: boolean
    default: true

  - name: publishCodeCoverage
    type: boolean
    default: true

  - name: testCoverageAssemblyFilter
    type: string
    default:

  - name: testCoverageFileFilter
    type: string
    default:

  - name: testCoverageClassFilter
    type: string
    default:

  - name: publishArtifactName
    type: string
    default: Artifact

steps:
  - checkout: self
    clean: true
    persistCredentials: true

  - task: Npm@1
    displayName: Restore npm packages
    # uncomment for internal feed
    # feedsToUse: select
    # vstsFeed: '<id>/<id>'
    inputs:
      command: custom
      customCommand: ci --cache .npm
      workingDir: $(BuildProject)

  - ${{ if eq(parameters.shouldTest, true) }}:
      - script: npm run test -- --run-in-band --coverage --coverage-directory $(Agent.TempDirectory)/coverage/ --watch=false
        displayName: Run tests
        workingDirectory: $(BuildProject)

      - task: PublishTestResults@2
        displayName: Publish Angular test results
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '**/junit.xml'
          testRunTitle: Unit Tests
          searchFolder: $(BuildProject)

  - ${{ if eq(parameters.publishCodeCoverage, true) }}:
      - script: dotnet tool restore
        displayName: Restore tools

      - script: reportgenerator -reports:$(Agent.TempDirectory)/coverage/**/coverage.cobertura.xml -targetdir:$(Agent.TempDirectory)/coverageReport/ -reporttypes:"Cobertura;HtmlInline_AzurePipelines" -assemblyfilters:"${{ parameters.testCoverageAssemblyFilter }}" -classfilters:"${{ parameters.testCoverageClassFilter }}" -filefilters:"${{ parameters.testCoverageFileFilter }}"
        displayName: Create code coverage report

      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage report
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Agent.TempDirectory)/coverageReport/Cobertura.xml
          reportDirectory: $(Agent.TempDirectory)/coverageReport
          failIfCoverageEmpty: false
        env:
          disable.coverage.autogenerate: true

  - ${{ if ne(parameters.shouldLint, true) }}:
      - script: npm run lint
        displayName: Run linting
        workingDirectory: $(BuildProject)

  - ${{ if ne(parameters.shouldPublish, true) }}:
      - script: npm run publish
        displayName: Publish app
        workingDirectory: $(BuildProject)

      - upload: ${{ parameters.buildProject }}/dist
        artifact: ${{ parameters.publishArtifactName }}
        displayName: Publish artifact
